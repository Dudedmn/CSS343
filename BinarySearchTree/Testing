// Yusuf Pisan pisan@uw.edu
// 15 Jan 2018
//Testing methods and menu edits added by Daniel Yan
// 18 Oct 2018


#include <iostream>
#include <sstream>
#include <vector>
// climits needed under linux, not needed under MacOS
#include <climits>

#include "binarysearchtree.h"
#include "binarynode.h"

using namespace std;

/*
Prints out the string of some item
@param String | string of some item
*/
void itemDisplay(string &anItem) {
	cout << anItem << " ";
}

/*
Gets the string of an item
@param - none
*/
string getString() {
	string str;
	cout << "Enter a string: ";
	cin >> str;
	return str;
}
/*
Vector which holds multiple strings
@param - none
*/
vector<string> getStrings() {
	string longString;
	cout << "Enter multiple strings: ";
	cin.clear();
	cin.ignore(INT_MAX, '\n');
	getline(cin, longString);
	stringstream ss;
	ss << longString;
	vector<string> v;
	string str;
	while (getline(ss, str, ' ')) {
		v.push_back(str);
	}
	return v;
}
/*
Switch case tree menu for method selection
@param - none
*/
void treeMenuString() {
	BinarySearchTree<string> bst;
	const string menu = "treeMenuString\n"
		"1. Add\n2. Search\n"
		"3. Inorder traverse\n"
		"4. Height & Number of nodes\n"
		"5. Rebalance\n"
		"6. Add Multiple\n"
		"7. Clear tree\n"
		"8. Create tree from sorted array\n"
		"10. Exit\n>> ";
	int choice;
	string str;
	cout << menu;
	while (true) {
		cin >> choice;
		switch (choice) {
		case 1:str = getString();
			cout << (bst.add(str) ? "" : "Not ") << "Added " << str << endl;
			break;
		case 2:str = getString();
			cout << (bst.contains(str) ? "" : "Not ") << "Found " << str << endl;
			break;
		case 3:bst.inorderTraverse(itemDisplay);
			cout << endl;
			break;
		case 4:cout << "Height: " << bst.getHeight() << endl;
			cout << "Number of nodes: " << bst.getNumberOfNodes() << endl;
			break;
		case 5:bst.rebalance();
			break;
		case 6:
			for (string str : getStrings())
				cout << (bst.add(str) ? "" : "Not ") << "Added " << str << endl;
			break;
		case 7:bst.clear();
			break;
		case 8: {
			bst.clear();
			vector<string> v{ getStrings() };
			bst.readTree(&v[0], v.size());
			break;
		}
		case 10: {
			bst.clear();
			return;
		}
		default:cout << "Bad input" << endl;
			cin.clear();
			cin.ignore(INT_MAX, '\n');
		}
		bst.displaySideways();
		cout << menu;
	}
}
/*
Int version of treeMenuString
@param - none
*/
void treeMenuInt() {
	BinarySearchTree<int> bst;
	const string menu = "treeMenuInt\n1. Add\n10. Exit\n>> ";
	int choice;
	int number;
	cout << menu;
	while (true) {
		cin >> choice;
		switch (choice) {
		case 1:cout << "Enter a number: ";
			cin >> number;
			cout << (bst.add(number) ? "" : "Not ") << "Added " << number << endl;
			break;
		case 10:bst.clear();
			return;
		default:cout << "Bad input" << endl;
			if (cin.fail()) {
				cin.clear();
				cin.ignore(INT_MAX, '\n');
			}
		}
		bst.displaySideways();
		cout << menu;
	}
}

/***************************************************************************

Testing Methods

***************************************************************************/

//Constructors

/*
Testing method for tree constructors
@param - none
*/
void constructorTest() {
	BinarySearchTree<string> bst, bst2("hello"), bst3(bst), bst4(bst2);
	cout << "Printing bst1: ";
	bst.displaySideways();
	cout << "\nPrinting bst2: ";
	bst2.displaySideways();
	cout << "\nPrinting bst3: ";
	bst3.displaySideways();
	cout << "\nPrinting bst4: ";
	bst4.displaySideways();
}

//Booleans

/*
Testing method for tree booleans
@param - none
*/
void boolTest() {
	BinarySearchTree<string> bst, bst2("hello"), bst3(bst), bst4(bst2);

	//isEmpty()
	cout << (bst.isEmpty() ? "OK" : "ERR") << ": bst is empty" << endl;
	cout << (bst2.isEmpty() ? "ERR" : "OK") << ": bst2 is not empty" << endl;
	cout << (bst3.isEmpty() ? "OK" : "ERR") << ": bst3 is empty" << endl;

	// == Operator
	cout << ((bst == bst2) ? "ERR" : "OK") << ": bst == bst2" << endl;
	cout << ((bst == bst3) ? "OK" : "ERR") << ": bst == bst3" << endl;
	cout << ((bst2 == bst4) ? "OK" : "ERR") << ": bst2 == bst4" << endl;

	// != Operator
	cout << ((bst != bst2) ? "OK" : "ERR") << ": bst != bst2" << endl;
	cout << ((bst != bst3) ? "ERR" : "OK") << ": bst != bst3" << endl;
	cout << ((bst2 != bst4) ? "ERR" : "OK") << ": bst2 != bst4" << endl;

	//add()
	cout << "Adding \"oneItem\" to bst";
	bst.add("oneItem");
	cout << "\nAdding \"oneItem\" to bst3";
	bst3.add("oneItem");
	cout << ((bst == bst3) ? "OK" : "ERR") << ": bst == bst3" << endl;
	cout << (bst.add("oneItem") ? "ERR" : "OK") << ": adding oneItem second time returns false" << endl;
	cout << "Adding \"secItem\" to bst";
	bst.add("secItem");

	//contains()
	cout << (bst.contains("secItem") ? "OK" : "ERR") << ": bst contains \"secItem\"" << endl;
	cout << (bst.contains("thirdItem") ? "ERR" : "OK") << ": bst does not contain \"thirdItem\"" << endl;
	cout << ((bst == bst3) ? "ERR" : "OK") << ": bst == bst3" << endl;
}

/*
Testing method for tree getters
@param - none
*/
void gettersTest() {
	BinarySearchTree<string> bst, bst2("hello"), bst3(bst), bst4(bst2);

	//getHeight()
	cout << bst.getHeight() << ": height of bst" << endl;
	cout << bst2.getHeight() << ": height of bst2" << endl;
	cout << "Adding 4 nodes to bst2" << endl;
	bst2.add("secondNode");
	bst2.add("thirdNode");
	bst2.add("fourthNode");
	bst2.add("fifthNode");
	bst2.displaySideways();
	cout << bst2.getHeight() << ": height of bst2" << endl;
	
	//getNumberOfNodes()
	cout << bst2.getNumberOfNodes() << ": number of nodes for bst2" << endl;
	cout << "adding 4 nodes to bst2 " << endl;
	bst2.add("sixthNode"); 
	bst2.add("seventhNode");
	bst2.add("eightNode");
	bst2.add("ninthNode");
	cout << bst2.getNumberOfNodes() << ": number of nodes for bst2" << endl;
	
}

/*
Helper method for treeTests to display inorderTraversal()
@params int& | Some int passed by reference
*/
void intDisplay(int &intItem) {
	cout << intItem << " ";
}

/*
Testing method for tree functionalities
@param - none
*/
void treeTests() {
	BinarySearchTree<string> bst, bst2("hello"), bst3(bst), bst4(bst2);
	BinarySearchTree<int> bst5, bst6(1), bst7(bst5), bst8(bst6);

	//inorderTraverse()
	//using ints to display tree and traversal more easily
	cout << "Adding 7 nodes to bst6" << endl;
	bst6.add(2);
	bst6.add(3);
	bst6.add(4);
	bst6.add(0);
	bst6.add(-1);
	bst6.add(-2);
	bst6.add(-3);
	cout << "displaying bst6 " << endl;
	bst6.displaySideways();
	cout << "displaying bst6 inorderTraversal " << endl;
	bst6.inorderTraverse(intDisplay);
	// for strings
	bst.add("g");
	bst.add("h");
	bst.add("i");
	bst.add("a");
	bst.add("b");
	bst.add("c");
	bst.add("d");
	cout << "\ndisplaying bst" << endl;
	bst.displaySideways();
	cout << "\ndisplaying bst inorderTraversal " << endl;
	bst.inorderTraverse(itemDisplay);

	//rebalance()
	bst5.add(1);
	bst5.add(2);
	bst5.add(3);
	bst5.add(4);
	bst5.add(5);
	bst5.add(6);
	bst5.add(7);
	bst5.add(8);
	cout << "\ndisplaying bst5 " << endl;
	bst5.displaySideways();
	cout << "rebalancing bst5 " << endl;
	bst5.rebalance();
	cout << "redisplaying bst5 " << endl;
	bst5.displaySideways();
	//rebalancing for strings
	bst3.add("g");
	bst3.add("h");
	bst3.add("i");
	bst3.add("a");
	bst3.add("b");
	bst3.add("c");
	bst3.add("d");
	cout << "displaying bst3 " << endl;
	bst3.displaySideways();
	cout << "rebalancing bst3 " << endl;
	bst3.rebalance();
	cout << "redisplaying bst3 " << endl;
	bst3.displaySideways();
	

	//clear()
	cout << "clearing bst " << endl;
	bst.clear();
	cout << ((bst == bst3) ? "ERR" : "OK") << ": bst does not equal bst3" << endl;
	cout << "clearing bst3 " << endl;
	bst3.clear();
	cout << ((bst == bst3) ? "OK" : "ERR") << ": bst does equals bst3" << endl;

	//readTree()
	cout << "displaying bst4 " << endl;
	bst4.displaySideways();
	//creating a vector of strings
	vector<string> v{ getStrings() };
	cout << "building bst4 from vector of strings" << endl;
	bst4.readTree(&v[0], v.size());
	cout << "displaying bst4 " << endl;
	bst4.displaySideways();
}

/*
Sample test already written
@params - none
*/
void sampleTest() {

	BinarySearchTree<string> bst1;
	BinarySearchTree<string> bst2;
	bst1.add("g");
	bst1.add("d");
	bst1.add("k");
	cout << ((bst1 != bst2) ? "OK" : "ERR") << ": bst1 != bst2" << endl;
	bst2.add("g");
	bst2.add("d");
	bst2.add("k");
	cout << ((bst1 == bst2) ? "OK" : "ERR") << ": bst1 == bst2" << endl;
	cout << (bst1.contains("d") ? "OK" : "ERR") << ": bst1 contains d" << endl;
	cout << (bst1.contains("x") ? "ERR" : "OK") << ": bst1 does not contain x" << endl;
	cout << (bst1.add("g") ? "ERR" : "OK") << ": adding g second time returns false" << endl;
	BinarySearchTree<string> bst3("g");
	cout << (bst3.contains("x") ? "ERR" : "OK") << ": bst3 does not contain x" << endl;
	cout << (bst3.contains("g") ? "OK" : "ERR") << ": bst3 contains g" << endl;
	BinarySearchTree<string> bst4(bst2);
	cout << ((bst4 == bst2) ? "OK" : "ERR") << ": bst4 == bst2" << endl;
	BinarySearchTree<string> bst5;
	treeMenuString();

}

/*
Testing method for all tests into a single method
@param - none
*/
void allTests() {
	sampleTest();
	constructorTest();
	boolTest();
	gettersTest();
	treeTests();
}

/*
Main testing function to ensure each function is working as intended
@param - none
*/
int main() {
	allTests();
	//pausing for console debugging
	//system("pause");
	return 0;
}
